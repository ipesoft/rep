# Generated by Django 3.1.1 on 2020-12-02 13:45

from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConservationAssessmentSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=30, verbose_name='Acronym')),
            ],
            options={
                'verbose_name': 'conservation assessment source',
                'verbose_name_plural': 'conservation assessment sources',
            },
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.TextField(verbose_name='Name')),
                ('htype', models.CharField(choices=[('B', 'Biome'), ('F', 'Fitofisionomy')], max_length=1, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'habitat',
                'verbose_name_plural': 'habitats',
                'ordering': ['path'],
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Title')),
                ('locality', models.TextField(blank=True, null=True, verbose_name='Locality')),
                ('when', models.DateTimeField(blank=True, null=True, verbose_name='When')),
                ('duration', models.CharField(blank=True, max_length=10, null=True, verbose_name='Duration')),
                ('interviewers', models.CharField(max_length=100, verbose_name='Interviewers')),
                ('interviewees', models.CharField(max_length=100, verbose_name='Interviewees')),
                ('content', models.TextField(verbose_name='Content')),
                ('audio_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Audio URL')),
            ],
            options={
                'verbose_name': 'interview',
                'verbose_name_plural': 'interviews',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation', models.TextField(help_text='e.g. Paranagua et al. 2011', unique=True, verbose_name='Citation')),
                ('full', models.TextField(help_text='e.g. Paranagua, P. 2011. Building cool systems for native plants. Cool Journal, 123(4): 1-10', verbose_name='Full reference')),
            ],
            options={
                'verbose_name': 'bibliographic reference',
                'verbose_name_plural': 'bibliographic references',
                'ordering': ['citation'],
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus', models.CharField(max_length=50, verbose_name='Genus')),
                ('species', models.CharField(blank=True, help_text='leave blank if unknown', max_length=50, null=True, verbose_name='Species')),
                ('subspecies', models.CharField(blank=True, help_text='do not include var.', max_length=50, null=True, verbose_name='Variety')),
                ('author', models.CharField(blank=True, help_text='only if the species is known', max_length=70, null=True, verbose_name='Author')),
                ('family', models.CharField(blank=True, max_length=20, null=True, verbose_name='Family')),
                ('label', models.TextField(blank=True, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, null=True, verbose_name='General description')),
                ('ethno_notes', models.TextField(blank=True, null=True, verbose_name='Ethnobotany description')),
                ('restoration', models.BooleanField(verbose_name='Restoration')),
                ('urban_use', models.BooleanField(verbose_name='Urban forestry')),
                ('silviculture', models.BooleanField(verbose_name='Silviculture')),
                ('h_flowers', models.BooleanField(verbose_name='Flowers')),
                ('h_leaves', models.BooleanField(verbose_name='Leaves')),
                ('h_fruits', models.BooleanField(verbose_name='Fruits')),
                ('h_crown', models.BooleanField(verbose_name='Crown')),
                ('h_bark', models.BooleanField(verbose_name='Bark')),
                ('h_seeds', models.BooleanField(verbose_name='Seeds')),
                ('h_wood', models.BooleanField(verbose_name='Wood')),
                ('h_roots', models.BooleanField(verbose_name='Roots')),
                ('rare', models.BooleanField(blank=True, null=True, verbose_name='Rare')),
                ('max_density', models.IntegerField(blank=True, help_text='individuals per hectare', null=True, verbose_name='Maximum density')),
                ('endemic', models.BooleanField(blank=True, null=True, verbose_name='Endemic')),
                ('sg_pioneer', models.BooleanField(verbose_name='Pioneer')),
                ('sg_early_secondary', models.BooleanField(verbose_name='Early secondary')),
                ('sg_late_secondary', models.BooleanField(verbose_name='Late secondary')),
                ('sg_climax', models.BooleanField(verbose_name='Climax')),
                ('gr_slow', models.BooleanField(verbose_name='Slow')),
                ('gr_moderate', models.BooleanField(verbose_name='Moderate')),
                ('gr_fast', models.BooleanField(verbose_name='Fast')),
                ('gr_comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('pruning', models.BooleanField(blank=True, null=True, verbose_name='Requires pruning')),
                ('fl_start', models.IntegerField(blank=True, choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], null=True, verbose_name='Start')),
                ('fl_end', models.IntegerField(blank=True, choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], null=True, verbose_name='End')),
                ('fl_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('fl_color', models.IntegerField(blank=True, choices=[(1, 'white'), (2, 'cream'), (3, 'yellow'), (4, 'pink'), (5, 'orange'), (6, 'red'), (7, 'green'), (8, 'purple')], null=True, verbose_name='Color')),
                ('fl_color_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('pollinators', models.TextField(blank=True, null=True, verbose_name='Pollinators')),
                ('dt_anemochorous', models.BooleanField(verbose_name='Anemochorous')),
                ('dt_autochorous', models.BooleanField(verbose_name='Autochorous')),
                ('dt_barochorous', models.BooleanField(verbose_name='Barochorous')),
                ('dt_hydrochorous', models.BooleanField(verbose_name='Hydrochorous')),
                ('dt_zoochorous', models.BooleanField(verbose_name='Zoochorous')),
                ('dispersers', models.TextField(blank=True, null=True, verbose_name='Dispersers')),
                ('fr_class', models.CharField(blank=True, choices=[('D', 'Dry dehiscent'), ('I', 'Dry indehiscent'), ('F', 'Fleshy indehiscent'), ('N', 'Infructescence'), ('M', 'Multiple'), ('P', 'Pseudofruit')], max_length=1, null=True, verbose_name='Fruit class')),
                ('fr_type', models.CharField(blank=True, choices=[('B', 'Berry'), ('C', 'Capsule'), ('D', 'Drupe'), ('L', 'Legume'), ('F', 'Follicle'), ('S', 'Silicle'), ('M', 'Samara'), ('A', 'Achene'), ('Y', 'Caryopsis'), ('N', 'Syconium'), ('H', 'Hesperidium'), ('P', 'Pepo'), ('X', 'Pyxis'), ('O', 'Operculate'), ('G', 'Glans')], max_length=1, null=True, verbose_name='Fruit type')),
                ('symbiotic_assoc', models.BooleanField(blank=True, null=True, verbose_name='Presence')),
                ('symbiotic_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('r_type', models.CharField(blank=True, choices=[('F', 'Fibrous'), ('T', 'Taproot')], max_length=1, null=True, verbose_name='Root system')),
                ('fo_evergreen', models.BooleanField(verbose_name='Evergreen')),
                ('fo_semideciduous', models.BooleanField(verbose_name='Semi-deciduous')),
                ('fo_deciduous', models.BooleanField(verbose_name='Deciduous')),
                ('cr_min_diameter', models.IntegerField(blank=True, help_text='meters', null=True, verbose_name='Minimum')),
                ('cr_max_diameter', models.IntegerField(blank=True, help_text='meters', null=True, verbose_name='Maximum')),
                ('cr_shape', models.CharField(blank=True, choices=[('S', 'Spherical'), ('E', 'Elliptical'), ('C', 'Conical'), ('L', 'Cylindrical'), ('Y', 'Corymbiform'), ('U', 'Umbelliform'), ('F', 'Flabelliform'), ('P', 'Pendant'), ('I', 'Irregular')], max_length=1, null=True, verbose_name='Type')),
                ('bark_texture', models.CharField(blank=True, choices=[('S', 'Smooth'), ('C', 'Cracked'), ('R', 'Rough')], max_length=1, null=True, verbose_name='Type')),
                ('tr_straight', models.BooleanField(verbose_name='Straight')),
                ('tr_sl_inclined', models.BooleanField(verbose_name='Slightly inclined')),
                ('tr_inclined', models.BooleanField(verbose_name='Inclined')),
                ('tr_sl_crooked', models.BooleanField(verbose_name='Slightly crooked')),
                ('tr_crooked', models.BooleanField(verbose_name='Crooked')),
                ('min_height', models.FloatField(blank=True, help_text='meters', null=True, verbose_name='Minimum height')),
                ('max_height', models.FloatField(blank=True, help_text='meters', null=True, verbose_name='Maximum height')),
                ('min_dbh', models.IntegerField(blank=True, help_text='centimeters', null=True, verbose_name='Minimum DBH')),
                ('max_dbh', models.IntegerField(blank=True, help_text='centimeters', null=True, verbose_name='Maximum DBH')),
                ('thorns_or_spines', models.BooleanField(blank=True, null=True, verbose_name='Presence')),
                ('toxic_or_allergenic', models.BooleanField(blank=True, null=True, verbose_name='Presence')),
                ('pests_and_diseases', models.TextField(blank=True, null=True, verbose_name='Information')),
                ('fr_start', models.IntegerField(blank=True, choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], null=True, verbose_name='Start')),
                ('fr_end', models.IntegerField(blank=True, choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], null=True, verbose_name='End')),
                ('fr_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('seed_tree', models.BooleanField(verbose_name='Collect fruits from tree')),
                ('seed_soil', models.BooleanField(verbose_name='Collect fruits from soil')),
                ('seed_collection', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('seed_type', models.CharField(blank=True, choices=[('R', 'Recalcitrant'), ('O', 'Orthodox'), ('I', 'Intermediary'), ('U', 'Unclassified')], max_length=1, null=True, verbose_name='Type')),
                ('pg_no_need', models.BooleanField(verbose_name='No need for treatment')),
                ('pg_thermal', models.BooleanField(verbose_name='Thermal treatment')),
                ('pg_chemical', models.BooleanField(verbose_name='Chemical treatment')),
                ('pg_water', models.BooleanField(verbose_name='Immersion in water')),
                ('pg_mechanical', models.BooleanField(verbose_name='Mechanical scarification')),
                ('pg_combined', models.BooleanField(verbose_name='Combined treatments')),
                ('pg_other', models.BooleanField(verbose_name='Other')),
                ('pg_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('sl_seedbed', models.BooleanField(verbose_name='Seedbed')),
                ('sl_containers', models.BooleanField(verbose_name='Individual containers')),
                ('sl_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('seed_gmin_time', models.IntegerField(blank=True, help_text='days', null=True, verbose_name='Minimum')),
                ('seed_gmax_time', models.IntegerField(blank=True, help_text='days', null=True, verbose_name='Maximum')),
                ('seed_gmin_rate', models.IntegerField(blank=True, help_text='%', null=True, verbose_name='Minimum')),
                ('seed_gmax_rate', models.IntegerField(blank=True, help_text='%', null=True, verbose_name='Maximum')),
                ('seeds_per_weight', models.IntegerField(blank=True, help_text='num/Kg', null=True, verbose_name='Quantity')),
                ('wetland', models.BooleanField(verbose_name='Wetland')),
                ('dry', models.BooleanField(verbose_name='Well-drained')),
                ('terrain_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('light', models.CharField(blank=True, choices=[('S', 'Shadow tolerant'), ('U', 'Full sun')], max_length=1, null=True, verbose_name='Classification')),
                ('light_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('wood_general_info', models.TextField(blank=True, null=True, verbose_name='General information')),
                ('wood_density', models.FloatField(blank=True, help_text='Kg/m3', null=True, verbose_name='Density')),
                ('wood_has_mai_curve', models.BooleanField(blank=True, null=True, verbose_name='Has mean annual increment curve')),
                ('wood_has_cai_curve', models.BooleanField(blank=True, null=True, verbose_name='Has current annual increment curve')),
                ('wood_has_biomass_equation', models.BooleanField(blank=True, null=True, verbose_name='Has biomass equation')),
                ('has_pictures', models.BooleanField(verbose_name='Has pictures')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(null=True, verbose_name='Date modified')),
            ],
            options={
                'verbose_name': 'plant',
                'verbose_name_plural': 'plants',
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='TypeOfUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('label', models.TextField(unique=True, verbose_name='Label')),
            ],
            options={
                'verbose_name': 'type of use',
                'verbose_name_plural': 'types of use',
                'ordering': ['path'],
            },
        ),
        migrations.CreateModel(
            name='TaxonUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fieldwork', models.BooleanField(verbose_name='Detected in fieldwork')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
                ('use', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.typeofuse', verbose_name='type of use')),
            ],
            options={
                'unique_together': {('taxon', 'use')},
            },
        ),
        migrations.CreateModel(
            name='TaxonOccurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField(blank=True, null=True, verbose_name='Label')),
                ('locality', models.TextField(blank=True, null=True, verbose_name='Locality')),
                ('long_orig', models.CharField(max_length=30, verbose_name='Original longitude')),
                ('lat_orig', models.CharField(max_length=30, verbose_name='Original latitude')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
            ],
        ),
        migrations.CreateModel(
            name='TaxonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Taxon name', max_length=50, verbose_name='Name')),
                ('ntype', models.CharField(choices=[('A', 'accepted'), ('S', 'synonym'), ('P', 'popular')], help_text='Type', max_length=1, verbose_name='Type')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
            ],
            options={
                'verbose_name': 'name',
                'verbose_name_plural': 'names',
            },
        ),
        migrations.CreateModel(
            name='TaxonHabitat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habitat', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.habitat', verbose_name='habitat')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
            ],
            options={
                'unique_together': {('taxon', 'habitat')},
            },
        ),
        migrations.CreateModel(
            name='TaxonDataReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(choices=[('RAR', 'Rarity'), ('END', 'Endemic'), ('SPE', 'Special features'), ('SUG', 'Successional group'), ('GRO', 'Growth rate'), ('PRU', 'Pruning'), ('FLP', 'Flowering period'), ('FLC', 'Flowering color'), ('POL', 'Pollinators'), ('SED', 'Seed dispersal'), ('DIS', 'Dispersers'), ('FRT', 'Fruit type'), ('SYM', 'Symbiotic association with roots'), ('ROT', 'Root system'), ('FOL', 'Foliage persistence'), ('CRD', 'Crown diameter'), ('CRS', 'Crown shape'), ('BRT', 'Bark texture'), ('TRA', 'Trunk alignment'), ('SIZ', 'Tree size'), ('TOS', 'Thorns or spines'), ('TOA', 'Toxic or allergenic'), ('PAD', 'Pests and diseases'), ('FRP', 'Fruiting period'), ('SEC', 'Seed collection'), ('SET', 'Seed type'), ('PGT', 'Pre-germination treatment'), ('SDL', 'Seedling production'), ('GET', 'Germination time lapse'), ('GER', 'Germination rate'), ('SPW', 'Seeds per weight'), ('LIG', 'Light requirements'), ('TER', 'Terrain drainage'), ('USE', 'Use'), ('HAB', 'Habitat'), ('WOO', 'Wood')], max_length=3, verbose_name='Data')),
                ('notes', models.CharField(blank=True, help_text='Additional notes, such as page numbers', max_length=80, null=True, verbose_name='Notes')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.reference', verbose_name='Reference')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
            ],
        ),
        migrations.CreateModel(
            name='TaxonCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cited_name', models.CharField(max_length=50, verbose_name='Cited name')),
                ('page', models.IntegerField(verbose_name='Page number')),
                ('interview', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.interview')),
                ('taxon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='app.taxon')),
            ],
        ),
        migrations.AddField(
            model_name='taxon',
            name='citations',
            field=models.ManyToManyField(through='app.TaxonCitation', to='app.Interview'),
        ),
        migrations.AddField(
            model_name='taxon',
            name='habitats',
            field=models.ManyToManyField(through='app.TaxonHabitat', to='app.Habitat'),
        ),
        migrations.AddField(
            model_name='taxon',
            name='references',
            field=models.ManyToManyField(through='app.TaxonDataReference', to='app.Reference'),
        ),
        migrations.AddField(
            model_name='taxon',
            name='uses',
            field=models.ManyToManyField(through='app.TaxonUse', to='app.TypeOfUse'),
        ),
        migrations.CreateModel(
            name='StaticContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='Unique code', verbose_name='Code')),
                ('lang', models.CharField(choices=[('en', 'Inglês'), ('pt-br', 'Português')], max_length=12, verbose_name='Language')),
                ('description', models.TextField(verbose_name='Description')),
                ('title', models.TextField(blank=True, null=True, verbose_name='Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
            ],
            options={
                'verbose_name': 'static content',
                'verbose_name_plural': 'static contents',
                'ordering': ['description'],
                'unique_together': {('code', 'lang')},
            },
        ),
        migrations.CreateModel(
            name='InterPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('page', models.IntegerField(verbose_name='Page number')),
                ('anchor', models.CharField(max_length=20, verbose_name='Anchor id')),
                ('interview', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.interview')),
            ],
        ),
        migrations.CreateModel(
            name='ConservationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=30, verbose_name='Status')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.conservationassessmentsource', verbose_name='Source')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.taxon')),
            ],
            options={
                'verbose_name': 'conservation status',
                'verbose_name_plural': 'conservation statuses',
            },
        ),
    ]
